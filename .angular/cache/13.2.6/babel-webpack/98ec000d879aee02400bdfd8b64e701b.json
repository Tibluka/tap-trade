{"ast":null,"code":"import _asyncToGenerator from \"/Users/lucasgomes/Desktop/Projects/Studying/TapTrade/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(http) {\n    this.http = http;\n    this.accountMode = 'PRACTICE';\n  }\n\n  get mode() {\n    return this.accountMode;\n  }\n\n  setAccountMode(mode) {\n    this.accountMode = mode;\n  }\n\n  setAccountBalance() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const balance = yield _this.http.get(`${environment.url}`).toPromise();\n      _this.accountBalance = balance;\n    })();\n  }\n\n}\n\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/lucasgomes/Desktop/Projects/Studying/TapTrade/src/app/services/account.service.ts"],"names":["environment","i0","i1","AccountService","constructor","http","accountMode","mode","setAccountMode","setAccountBalance","balance","get","url","toPromise","accountBalance","ɵfac","AccountService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmB,UAAnB;AACH;;AACO,MAAJC,IAAI,GAAG;AACP,WAAO,KAAKD,WAAZ;AACH;;AACDE,EAAAA,cAAc,CAACD,IAAD,EAAO;AACjB,SAAKD,WAAL,GAAmBC,IAAnB;AACH;;AACKE,EAAAA,iBAAiB,GAAG;AAAA;;AAAA;AACtB,YAAMC,OAAO,SAAS,KAAI,CAACL,IAAL,CAAUM,GAAV,CAAe,GAAEX,WAAW,CAACY,GAAI,EAAjC,EAAoCC,SAApC,EAAtB;AACA,MAAA,KAAI,CAACC,cAAL,GAAsBJ,OAAtB;AAFsB;AAGzB;;AAduB;;AAgB5BP,cAAc,CAACY,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAId,cAAV,EAA0BF,EAAE,CAACiB,QAAH,CAAYhB,EAAE,CAACiB,UAAf,CAA1B,CAAP;AAA+D,CAA1H;;AACAhB,cAAc,CAACiB,KAAf,GAAuB,aAAcnB,EAAE,CAACoB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEnB,cAAT;AAAyBoB,EAAAA,OAAO,EAAEpB,cAAc,CAACY,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n    constructor(http) {\n        this.http = http;\n        this.accountMode = 'PRACTICE';\n    }\n    get mode() {\n        return this.accountMode;\n    }\n    setAccountMode(mode) {\n        this.accountMode = mode;\n    }\n    async setAccountBalance() {\n        const balance = await this.http.get(`${environment.url}`).toPromise();\n        this.accountBalance = balance;\n    }\n}\nAccountService.ɵfac = function AccountService_Factory(t) { return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient)); };\nAccountService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AccountService, factory: AccountService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}